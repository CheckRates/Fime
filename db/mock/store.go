// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/checkrates/Fime/db/postgres (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	postgres "github.com/checkrates/Fime/db/postgres"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateImage mocks base method
func (m *MockStore) CreateImage(arg0 postgres.CreateImageParams) (postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0)
	ret0, _ := ret[0].(postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockStoreMockRecorder) CreateImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockStore)(nil).CreateImage), arg0)
}

// CreateImageTag mocks base method
func (m *MockStore) CreateImageTag(arg0 postgres.ImageTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageTag indicates an expected call of CreateImageTag
func (mr *MockStoreMockRecorder) CreateImageTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageTag", reflect.TypeOf((*MockStore)(nil).CreateImageTag), arg0)
}

// CreateTag mocks base method
func (m *MockStore) CreateTag(arg0 postgres.CreateTagParams) (postgres.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0)
	ret0, _ := ret[0].(postgres.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockStoreMockRecorder) CreateTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockStore)(nil).CreateTag), arg0)
}

// CreateUser mocks base method
func (m *MockStore) CreateUser(arg0 postgres.CreateUserParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0)
}

// DeleteAllImageTags mocks base method
func (m *MockStore) DeleteAllImageTags(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllImageTags", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllImageTags indicates an expected call of DeleteAllImageTags
func (mr *MockStoreMockRecorder) DeleteAllImageTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllImageTags", reflect.TypeOf((*MockStore)(nil).DeleteAllImageTags), arg0)
}

// DeleteImage mocks base method
func (m *MockStore) DeleteImage(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockStoreMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), arg0)
}

// DeleteImageTag mocks base method
func (m *MockStore) DeleteImageTag(arg0 postgres.ImageTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageTag indicates an expected call of DeleteImageTag
func (mr *MockStoreMockRecorder) DeleteImageTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageTag", reflect.TypeOf((*MockStore)(nil).DeleteImageTag), arg0)
}

// DeletePostTx mocks base method
func (m *MockStore) DeletePostTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTx indicates an expected call of DeletePostTx
func (mr *MockStoreMockRecorder) DeletePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTx", reflect.TypeOf((*MockStore)(nil).DeletePostTx), arg0, arg1)
}

// DeleteTag mocks base method
func (m *MockStore) DeleteTag(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockStoreMockRecorder) DeleteTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockStore)(nil).DeleteTag), arg0)
}

// DeleteUser mocks base method
func (m *MockStore) DeleteUser(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockStoreMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0)
}

// GetImagesByTagID mocks base method
func (m *MockStore) GetImagesByTagID(arg0 int64) ([]postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByTagID", arg0)
	ret0, _ := ret[0].([]postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByTagID indicates an expected call of GetImagesByTagID
func (mr *MockStoreMockRecorder) GetImagesByTagID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByTagID", reflect.TypeOf((*MockStore)(nil).GetImagesByTagID), arg0)
}

// GetPostTx mocks base method
func (m *MockStore) GetPostTx(arg0 context.Context, arg1 int64) (postgres.ImagePostResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTx", arg0, arg1)
	ret0, _ := ret[0].(postgres.ImagePostResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTx indicates an expected call of GetPostTx
func (mr *MockStoreMockRecorder) GetPostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTx", reflect.TypeOf((*MockStore)(nil).GetPostTx), arg0, arg1)
}

// GetTagsByImageID mocks base method
func (m *MockStore) GetTagsByImageID(arg0 int64) ([]postgres.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByImageID", arg0)
	ret0, _ := ret[0].([]postgres.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByImageID indicates an expected call of GetTagsByImageID
func (mr *MockStoreMockRecorder) GetTagsByImageID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByImageID", reflect.TypeOf((*MockStore)(nil).GetTagsByImageID), arg0)
}

// GetUserTags mocks base method
func (m *MockStore) GetUserTags(arg0 postgres.ListUserTagsParams) ([]postgres.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTags", arg0)
	ret0, _ := ret[0].([]postgres.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTags indicates an expected call of GetUserTags
func (mr *MockStoreMockRecorder) GetUserTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTags", reflect.TypeOf((*MockStore)(nil).GetUserTags), arg0)
}

// Image mocks base method
func (m *MockStore) Image(arg0 int64) (postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image", arg0)
	ret0, _ := ret[0].(postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Image indicates an expected call of Image
func (mr *MockStoreMockRecorder) Image(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockStore)(nil).Image), arg0)
}

// Images mocks base method
func (m *MockStore) Images(arg0 postgres.ListParams) ([]postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", arg0)
	ret0, _ := ret[0].([]postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images
func (mr *MockStoreMockRecorder) Images(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockStore)(nil).Images), arg0)
}

// ImagesByUser mocks base method
func (m *MockStore) ImagesByUser(arg0 postgres.ListUserImagesParams) ([]postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagesByUser", arg0)
	ret0, _ := ret[0].([]postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagesByUser indicates an expected call of ImagesByUser
func (mr *MockStoreMockRecorder) ImagesByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagesByUser", reflect.TypeOf((*MockStore)(nil).ImagesByUser), arg0)
}

// ListPostTx mocks base method
func (m *MockStore) ListPostTx(arg0 context.Context, arg1 postgres.ListParams) ([]postgres.ImagePostResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostTx", arg0, arg1)
	ret0, _ := ret[0].([]postgres.ImagePostResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostTx indicates an expected call of ListPostTx
func (mr *MockStoreMockRecorder) ListPostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostTx", reflect.TypeOf((*MockStore)(nil).ListPostTx), arg0, arg1)
}

// ListUserPostTx mocks base method
func (m *MockStore) ListUserPostTx(arg0 context.Context, arg1 postgres.ListUserPostsParams) ([]postgres.ImagePostResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPostTx", arg0, arg1)
	ret0, _ := ret[0].([]postgres.ImagePostResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPostTx indicates an expected call of ListUserPostTx
func (mr *MockStoreMockRecorder) ListUserPostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPostTx", reflect.TypeOf((*MockStore)(nil).ListUserPostTx), arg0, arg1)
}

// MakePostTx mocks base method
func (m *MockStore) MakePostTx(arg0 context.Context, arg1 postgres.MakePostParams) (postgres.ImagePostResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePostTx", arg0, arg1)
	ret0, _ := ret[0].(postgres.ImagePostResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePostTx indicates an expected call of MakePostTx
func (mr *MockStoreMockRecorder) MakePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePostTx", reflect.TypeOf((*MockStore)(nil).MakePostTx), arg0, arg1)
}

// Tag mocks base method
func (m *MockStore) Tag(arg0 int64) (postgres.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0)
	ret0, _ := ret[0].(postgres.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag
func (mr *MockStoreMockRecorder) Tag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockStore)(nil).Tag), arg0)
}

// Tags mocks base method
func (m *MockStore) Tags(arg0 postgres.ListParams) ([]postgres.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags", arg0)
	ret0, _ := ret[0].([]postgres.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags
func (mr *MockStoreMockRecorder) Tags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockStore)(nil).Tags), arg0)
}

// UpdateImage mocks base method
func (m *MockStore) UpdateImage(arg0 postgres.UpdateImageParams) (postgres.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0)
	ret0, _ := ret[0].(postgres.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockStoreMockRecorder) UpdateImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockStore)(nil).UpdateImage), arg0)
}

// UpdatePostTx mocks base method
func (m *MockStore) UpdatePostTx(arg0 context.Context, arg1 postgres.UpdatePostParams) (postgres.ImagePostResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostTx", arg0, arg1)
	ret0, _ := ret[0].(postgres.ImagePostResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePostTx indicates an expected call of UpdatePostTx
func (mr *MockStoreMockRecorder) UpdatePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostTx", reflect.TypeOf((*MockStore)(nil).UpdatePostTx), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockStore) UpdateUser(arg0 postgres.UpdateUserParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockStoreMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0)
}

// User mocks base method
func (m *MockStore) User(arg0 int64) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockStoreMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStore)(nil).User), arg0)
}

// Users mocks base method
func (m *MockStore) Users(arg0 postgres.ListParams) ([]postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0)
	ret0, _ := ret[0].([]postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users
func (mr *MockStoreMockRecorder) Users(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockStore)(nil).Users), arg0)
}
